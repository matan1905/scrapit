/* Scrapit.java */
/* Generated By:JavaCC: Do not edit this line. Scrapit.java */

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Scrapit implements ScrapitConstants {
        static   ArrayList<Element> elements;

public static void main(String args[]) throws ParseException {
          Scrapit parser;
          if (args.length == 0) {
            parser = new Scrapit(System.in);
          } else if (args.length == 1) {
            try {
              parser = new Scrapit(new java.io.FileInputStream(args[0]));
            } catch (java.io.FileNotFoundException e) {
              System.out.println(e);
              System.out.println("Scrapit:  File " + args[0] + " not found.");
              return;
            }
          } else {
            System.out.println("Scrapit:  Usage is one of:");
            System.out.println("         java scrapit < inputfile");
            System.out.println("OR");
            System.out.println("         java scrapit inputfile");
            return;
          }
          try {
            parser.start();
          } catch (ParseException e) {
            System.out.println(e.getMessage());
            System.out.println("Scrapit:  Encountered errors during parse.");
          }
        }

               public static void loadElements(String selector,String from){
          try {
            Document doc = Jsoup.connect(from).get();
            elements.addAll(doc.select(selector));
          } catch (IOException e) {
            throw new RuntimeException(e);
          }

        }

       private static final String attrPattern = "\u005c\u005c$attr\u005c\u005c[\u005c\u005c'(.)*\u005c\u005c'\u005c\u005c]";
  private static final Pattern p = Pattern.compile(attrPattern);
  public static void print(String format,MapObj map){
    performAction(new ElementAction() {
        @Override
        public void doAction(Element element, int index) {
      System.out.println(format(format,element,index));

        }
      },map);
  }
  public static class MapObj{
    Token left,condition,right;
       public MapObj(Token left, Token condition, Token right) {

      this.left = left;
      this.condition = condition;
      this.right = right;
    }
  }
  public static String format(String format,Element element,int index){
                String formatted = format
              .replace("$text",element.text())
              .replace("$html",element.html())
              .replace("$element",element.outerHtml())
              .replace("$id",element.id())
              .replace("$tag",element.tagName())
              .replace("$class",element.className())
              .replace("$index",String.valueOf(index));
      Matcher match = p.matcher(formatted);
      while (match.find()){
        String result=match.group(0);
        formatted=formatted.replace(result,element.attr(result.substring(7,result.length()-2)));
      }

      return formatted;
  }
  public static void load(String extractor,String filename,MapObj map){

    performAction(new ElementAction() {
        @Override
        public void doAction(Element element, int index) {
        saveUrl(format(extractor,element,index),format(filename,element,index));

        }
      },map);

  }
 public static void save(String format,String filename,MapObj map){
    final java.io.PrintWriter p;
    try {
       p = new java.io.PrintWriter(filename);
    } catch (java.io.FileNotFoundException e) {
      throw new RuntimeException(e);
    }
     performAction(new ElementAction() {
        @Override
        public void doAction(Element element, int index) {
                      p.println(format(format,element,index));

        }
      },map);
    p.close();
  }

  public static void performAction(ElementAction action,MapObj map){
        for (int i=0;i<elements.size();i++) {
        Element element = elements.get(i);
        if(isMapped(map,element,i))
        action.doAction(element,i);
    }
  }
  public interface ElementAction{
        public  void doAction(Element element, int index);
  }
public static boolean isMapped(MapObj map,Element element,int index){
        if (map==null) return true;
  String right = (format(map.right.toString(),element,index));
  right=right.substring(1,right.length()-1);
  String left = (format(map.left.toString(),element,index));
  left=left.substring(1,left.length()-1);
        switch (map.condition.kind){
          case ScrapitConstants.EQUAL:return right.equals(left);
          case ScrapitConstants.NOT_EQUAL:return !right.equals(left);
          case ScrapitConstants.LIKE:


            if(right.startsWith("%") && right.endsWith("%")){
              return left.contains(right.substring(1,right.length()-1));
            }
            else if (right.startsWith("%")){
              return left.endsWith(right.substring(1));
            }
            else if(right.endsWith("%")){
              return left.startsWith(right.substring(0,right.length()-1));
            }
            else{
              throw new RuntimeException("LIKE Condition Wildcard '%' should be at the START and/or END of the second string");
            }

            case ScrapitConstants.REGEX:
              Pattern p = Pattern.compile(right);
              return p.matcher(left).find();

        }
        return true;
  }


    public static void saveUrl( final String urlString,final String filename) {
      try{
    BufferedInputStream in = null;
    FileOutputStream fout = null;
    try {
      in = new BufferedInputStream(new URL(urlString).openStream());
      fout = new FileOutputStream(filename);

      final byte data[] = new byte[1024];
      int count;
      while ((count = in.read(data, 0, 1024)) != -1) {
        fout.write(data, 0, count);
      }
    } finally {
      if (in != null) {
        in.close();
      }
      if (fout != null) {
        fout.close();
      }
    }
      }
      catch ( IOException e){
        throw new RuntimeException(e);
      }
  }

  static final public void start() throws ParseException {
    label_1:
    while (true) {
      Statement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELECT:
      case SAVE:
      case PRINT:
      case LOAD:
      case MAP:
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:
    case SAVE:
    case PRINT:
    case LOAD:
    case MAP:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELECT:{
        SelectStatment();

        break;
        }
      case MAP:{
        Map();
        break;
        }
      case SAVE:
      case PRINT:
      case LOAD:{
        ActionStatment(null);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Statement();
      break;
      }
    case SEMICOLON:{
      jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Map() throws ParseException {Token left,condition,right;
    jj_consume_token(MAP);
    left = jj_consume_token(STRING_LITERAL);
    condition = Condition();
    right = jj_consume_token(STRING_LITERAL);
    ActionStatment(new MapObj(left,condition,right));
  }

  static final public Token Condition() throws ParseException {Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
      token = jj_consume_token(EQUAL);
      break;
      }
    case NOT_EQUAL:{
      token = jj_consume_token(NOT_EQUAL);
      break;
      }
    case REGEX:{
      token = jj_consume_token(REGEX);
      break;
      }
    case LIKE:{
      token = jj_consume_token(LIKE);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return token;}
    throw new Error("Missing return statement in function");
  }

  static final public void SelectStatment() throws ParseException {Token select;
elements = new ArrayList<Element>();
    jj_consume_token(SELECT);
    select = jj_consume_token(STRING_LITERAL);
    FromStatement(select.toString().substring(1,select.toString().length()-1));
  }

  static final public void FromStatement(String selector) throws ParseException {Token from;
    jj_consume_token(FROM);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:
      case 18:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 18:{
        jj_consume_token(18);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      from = jj_consume_token(STRING_LITERAL);
loadElements(selector,from.toString().substring(1,from.toString().length()-1));
    }
  }

  static final public void ActionStatment(MapObj map) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SAVE:{
      SaveAction(map);
      break;
      }
    case PRINT:{
      PrintAction(map);
      break;
      }
    case LOAD:{
      LoadAction(map);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void SaveAction(MapObj map) throws ParseException {Token format;
Token filename;
    jj_consume_token(SAVE);
    format = jj_consume_token(STRING_LITERAL);
    filename = jj_consume_token(STRING_LITERAL);
save(format.toString().substring(1,format.toString().length()-1),filename.toString().substring(1,filename.toString().length()-1),map);
  }

  static final public void PrintAction(MapObj map) throws ParseException {Token print;
    jj_consume_token(PRINT);
    print = jj_consume_token(STRING_LITERAL);
print(print.toString().substring(1,print.toString().length()-1),map);
  }

  static final public void LoadAction(MapObj map) throws ParseException {Token filename; Token extractor;
    jj_consume_token(LOAD);
    extractor = jj_consume_token(STRING_LITERAL);
    filename = jj_consume_token(STRING_LITERAL);
load(extractor.toString().substring(1,extractor.toString().length()-1),filename.toString().substring(1,filename.toString().length()-1),map);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ScrapitTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8f40,0xf40,0x8f40,0x33000,0x44000,0x40000,0x700,};
   }

  /** Constructor with InputStream. */
  public Scrapit(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Scrapit(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ScrapitTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Scrapit(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScrapitTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Scrapit(ScrapitTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ScrapitTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
